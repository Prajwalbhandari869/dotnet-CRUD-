@page "/trackpages/trackviewallpage"


@inject NavigationManager _nav
@inject ITrackServices _trackServices
<div>
    <div style="display:inline-flex">
        <div style="margin-right:80px;">
            <h3>TracksList</h3>
        </div>
        <div>
            <input type="button" class="btn btn-primary" @onclick="@AddTrack" value="Add Track" />
        </div>
        <br /><br />
    </div>
    <div class="col-md-6">
        <div style="display:inline-flex; margin-bottom:5px">
            <div style="margin-right:80px;">
                <TelerikTextBox @bind-Value="@SearchTitle" PlaceHolder="Search by Title" Width="150px"></TelerikTextBox>
            </div>
            <div style="right:auto">
                <TelerikButton OnClick="OnSearch">Search</TelerikButton>
            </div>
            <br />
        </div>
        <TelerikGrid Class="warpdisable" TItem="@ViewAllTrack"
                     @ref="GridRef" Pageable="true"
                     Sortable="true" OnRead="SetPageDetail"
                     Height="280px" Reorderable="true"
                     Resizable="true" @bind-PageSize="@pageSize"
                     OnStateInit="@((GridStateEventArgs<ViewAllTrack> args) => OnStateInitHandler(args))">
            <GridSettings>
                <GridPagerSettings PageSizes="@PageSizes" />
            </GridSettings>
            <GridColumns>
                <GridColumn Field="@nameof(ViewAllTrack.Title)" Title=Title OnCellRender="@OnCellRenderHandler">
                    <Template>
                        @{
                            <NavLink onclick="@(()=>GoToTrackDetails((context as ViewAllTrack).Id))">
                                <span class="change" style="cursor:pointer; color:blueviolet">@((context as ViewAllTrack).Title)</span>
                            </NavLink>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@(nameof(ViewAllTrack.Rating))" Title="Rating" OnCellRender="@OnCellRenderHandler">
                    <Template>
                        @{
                            int count = (context as ViewAllTrack).Rating;
                            for (var i = 1; i <= 5; i++)
                            {
                                if (i <= count)
                                {
                                    <i class="fa fa-star" style="color:blue"></i>
                                }
                                else
                                {
                                    <i class="fa fa-star" style="color:purple"></i>
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@(nameof(ViewAllTrack.Length))" Title="Length" OnCellRender="@OnCellRenderHandler">
                    <Template>
                        @((context as ViewAllTrack).Length.ToString("mm:ss"))
                    </Template>
                </GridColumn>
                <GridColumn Field="@(nameof(ViewAllTrack.AlbumTitle))" Title="Album" OnCellRender="@OnCellRenderHandler"></GridColumn>
                <GridColumn Field="@(nameof(ViewAllTrack.GenreName))" Title="Genre" OnCellRender="@OnCellRenderHandler"></GridColumn>
            </GridColumns>
        </TelerikGrid>
    </div>
</div>
<style>
    .disable-warp {
        overflow: hidden;
        max-height: 60px;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .change:hover {
        text-decoration: underline;
    }
</style>
@code {
    public int TotalCount = 0;
    protected int pageSize { get; set; } = 5;
    protected List<int?> PageSizes { get; set; } = new List<int?> { 5, 10, 25, 50 };
    protected string SearchTitle = "";

    protected PageDetails pageDetails = new PageDetails();
    protected Data<ViewAllTrack> data { get; set; }

    TelerikGrid<ViewAllTrack> GridRef { get; set; }
    IEnumerable<ViewAllTrack> tracks = new List<ViewAllTrack>();
    //protected override async Task OnInitializedAsync()
    //{
    //    data = await _trackServices.GetTracksAsync(pageDetails);
    //    tracks = data.CurrentPageData;
    //    TotalCount = data.TotalItemCount;
    //}
    protected void OnStateInitHandler(GridStateEventArgs<ViewAllTrack> args)
    {
        args.GridState.SortDescriptors.Add(new SortDescriptor { Member = "Track", SortDirection = ListSortDirection.Ascending });
    }

    protected async Task OnSearch()
    {
        var currentRef = GridRef.GetState();
        currentRef.Page = 1;
        await GridRef.SetState(currentRef);
    }

    protected async Task SetPageDetail(GridReadEventArgs args)
    {
        pageDetails.PageNumber = args.Request.Page;
        pageDetails.PageSize = args.Request.PageSize;
        pageDetails.SortBy = args.Request.Sorts.FirstOrDefault()?.Member;
        pageDetails.SortingDirection = ((int?)args.Request.Sorts.FirstOrDefault()?.SortDirection) ?? 0;
        pageDetails.Search = SearchTitle;
        data = await _trackServices.GetTracksAsync(pageDetails);
        args.Data = data.CurrentPageData;
        args.Total = data.TotalItemCount;
    }

    protected void AddTrack()
    {
        _nav.NavigateTo("/trackpages/trackcreatepage");
    }
    protected void GoToTrackDetails(int id)
    {
        _nav.NavigateTo($"/trackpages/trackviewpage/{id}");
    }
    protected void OnCellRenderHandler(GridCellRenderEventArgs arg)
    {
        arg.Class = "disable-warp";
    }
}
